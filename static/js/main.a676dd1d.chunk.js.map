{"version":3,"sources":["components/Menu/Menu.jsx","components/Tree/TreeItem/TreeItem.jsx","components/Tree/Tree.jsx","constants.js","components/Modal/Modal.jsx","Application.jsx","serviceWorker.js","index.js"],"names":["b","block","Menu","handleAddButtonClick","props","onItemControlsClick","id","handleDeleteButtonClick","handleEditButtonClick","itemsVisibilityMask","this","className","invisible","add","color","onClick","delete","edit","React","PureComponent","TreeItem","item","itemName","name","childrens","map","child","index","key","Component","Tree","initialData","rootName","modalStyles","overlay","backgroundColor","content","position","padding","width","border","borderRadius","overflow","top","left","transform","Modal","text","isOpen","onInputChange","onModalOKButtonClick","onModalCloseButtonClick","ariaHideApp","onRequestClose","style","type","onChange","autoFocus","Application","state","tree","isModalOpen","currentID","currentInputValue","currentAct","handleItemControlsClick","action","showModal","deleteItem","handleInputChange","event","setState","target","value","handleOKButtonClick","addItem","editItem","handleCloseButtonClick","readOnly","JSON","stringify","uuid","newChildrens","addItemByRecursion","reduce","acc","deleteItemByRecursion","editItemByRecursion","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a676dd1d.chunk.js","sourcesContent":["import React from 'react';\nimport { block } from 'bem-cn';\n\nimport './Menu.css';\n\nconst b = block('menu');\n\nclass Menu extends React.PureComponent {\n\n  render() {\n    const { itemsVisibilityMask } = this.props;\n\n    return (\n      <div className={b()}>\n        <button className={b('item', { invisible: !itemsVisibilityMask.add, color: 'green' })} onClick={this.handleAddButtonClick}>\n          {'add'}\n        </button>\n        <button className={b('item', { invisible: !itemsVisibilityMask.delete, color: 'red' })} onClick={this.handleDeleteButtonClick}>\n          {'delete'}\n        </button>\n        <button className={b('item', { invisible: !itemsVisibilityMask.edit, color: 'yellow' })} onClick={this.handleEditButtonClick}>\n          {'edit'}\n        </button>\n      </div>\n    );\n  }\n\n  handleAddButtonClick = () => {\n    const { onItemControlsClick, id } = this.props;\n    onItemControlsClick(id, 'add');\n  }\n\n  handleDeleteButtonClick = () => {\n    const { onItemControlsClick, id } = this.props;\n    onItemControlsClick(id, 'delete');\n  }\n\n  handleEditButtonClick = () => {\n    const { onItemControlsClick, id } = this.props;\n    onItemControlsClick(id, 'edit');\n  }\n}\n\nexport default Menu;\n","import React from 'react';\nimport { block } from 'bem-cn';\n\nimport Menu from '../../Menu/Menu';\n\nimport './TreeItem.css';\n\nconst b = block('tree-item');\n\nclass TreeItem extends React.Component {\n\n  render() {\n    const { item, onItemControlsClick } = this.props;\n    const menuItemsVisibility = { add: true, delete: true, edit: true };\n    const itemName = item.name ? item.name : 'unknown';\n\n    return (\n      <div className={b()}>\n        <div className={b('header')}>\n          <div className={b('header-left-side')}>\n            {itemName}\n          </div>\n          <div className={b('header-right-side')}>\n            <Menu\n              itemsVisibilityMask={menuItemsVisibility}\n              onItemControlsClick={onItemControlsClick}\n              id={item.id}\n            />\n          </div>\n        </div>\n        {item.childrens &&\n          item.childrens.map((child, index) => {\n            return (\n              <div className={b('content')} key={index}>\n                <TreeItem item={child} onItemControlsClick={onItemControlsClick} />\n              </div>\n            );\n          })\n        }\n\n      </div>\n    );\n  }\n}\n\nexport default TreeItem;","import React from 'react';\nimport { block } from 'bem-cn';\n\nimport Menu from '../Menu/Menu';\nimport TreeItem from './TreeItem/TreeItem';\n\nimport './Tree.css';\n\nconst b = block('tree');\n\nclass Tree extends React.Component {\n\n  render() {\n    const { initialData: { childrens, id, name }, onItemControlsClick } = this.props;\n    const topLevelMenuItemsVisibility = { add: true, delete: false, edit: true };\n    const rootName = name ? name : 'unknown';\n\n    return (\n      <div className={b()}>\n        <div className={b('header')}>\n          <div className={b('header-left-side')}>\n            {rootName}\n          </div>\n          <div className={b('header-right-side')}>\n            <Menu\n              itemsVisibilityMask={topLevelMenuItemsVisibility}\n              onItemControlsClick={onItemControlsClick}\n              id={id}\n            />\n          </div>\n        </div>\n        {childrens.map((child, index) => {\n          return (\n            <div className={b('content')} key={index}>\n              <TreeItem item={child} onItemControlsClick={onItemControlsClick} />\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default Tree;\n","const modalStyles = {\n  overlay: {\n    backgroundColor: 'rgba(0,0,0,0.7)'\n  },\n  content: {\n    position: 'relative',\n    padding: '1rem',\n    width: '35rem',\n    border: '1px solid #707070',\n    borderRadius: '5px',\n    backgroundColor: '#fff',\n    overflow: 'hidden',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n  },\n};\n\nconst initialData = {\n  id: 0,\n  name: 'Мой компьютер',\n  childrens: [\n    {\n      id: 1,\n      name: 'disc C:',\n      childrens: [\n        {\n          id:11,\n          name: 'фоточки',\n          childrens: [],\n        },\n        {\n          id:12,\n          name: 'документики',\n          childrens: [],\n        },\n        {\n          id:13,\n          name: 'прочее',\n          childrens: [],\n        },\n      ],\n    },\n    {\n      id: 2,\n      name: 'disc D:',\n      childrens: [\n        {\n          id:21,\n          name: 'Distributives',\n          childrens: [],\n        },\n        {\n          id:22,\n          name: 'Program Files',\n          childrens: [\n            {\n              id:221,\n              name: 'Adobe',\n              childrens: [\n                {\n                  id:2211,\n                  name: 'adobe.exe',\n                  childrens: [],\n                },\n                {\n                  id:2212,\n                  name: 'adobe_x64.exe',\n                  childrens: [],\n                },\n              ],\n            },\n            {\n              id:222,\n              name: 'system.ini',\n              childrens: [],\n            },\n            {\n              id:223,\n              name: 'swapfile.sys',\n              childrens: [],\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: 3,\n      name: 'disc E:',\n      childrens: [\n        {\n          id:31,\n          name: 'pagefile.sys',\n          childrens: [],\n        },\n        {\n          id:32,\n          name: 'system.ini',\n          childrens: [],\n        },\n        {\n          id:33,\n          name: 'swapfile.sys',\n          childrens: [],\n        },\n      ],\n    },\n  ],\n};\n\n\nexport { modalStyles, initialData };","import React from 'react';\nimport { block } from 'bem-cn';\nimport ReactModal from 'react-modal';\n\nimport { modalStyles } from '../../constants.js';\n\nimport './Modal.css';\n\nconst b = block('modal');\n\nclass Modal extends React.Component {\n  render() {\n    const { text, isOpen, onInputChange, onModalOKButtonClick, onModalCloseButtonClick } = this.props;\n\n    return (\n      <ReactModal\n        ariaHideApp={false}\n        isOpen={isOpen}\n        onRequestClose={onModalCloseButtonClick}\n        style={modalStyles}\n      >\n        <div className={b()}>\n          <div className={b('text')}>\n            {text}\n          </div>\n          <div className={b('content')}>\n            <input className={b('input')} type=\"text\" onChange={onInputChange} autoFocus={true} />\n            <button className={b('button')} onClick={onModalOKButtonClick}>OK</button>\n            <button className={b('button')} onClick={onModalCloseButtonClick}>close</button>\n          </div>\n        </div>\n      </ReactModal>\n    );\n  }\n}\n\nexport default Modal;\n","import React from 'react';\nimport { block } from 'bem-cn';\nimport uuid from 'uuid';\n\nimport Tree from './components/Tree/Tree';\nimport Modal from './components/Modal/Modal';\nimport { initialData } from './constants.js';\nimport './Application.css';\n\nconst b = block('application');\n\nclass Application extends React.Component {\n  state = {\n    tree: initialData,\n    isModalOpen: false,\n    currentID: null,\n    currentInputValue: '',\n    currentAct: '',\n  };\n\n  render() {\n    const { isModalOpen } = this.state;\n\n    return (\n      <div className={b()}>\n        <header className={b('header')}>Приложение для генерации дерева из статичного файла, управления узлами и генерации json</header>\n        <div className={b('content')}>\n          <div className={b('tree')}>\n            <Tree initialData={this.state.tree} onItemControlsClick={this.handleItemControlsClick} />\n          </div>\n          <div className={b('output-area')}>\n            <textarea className={b('textarea')} readOnly value={JSON.stringify(this.state.tree)} />\n          </div>\n        </div>\n        <Modal\n          text=\"Enter new item name: \"\n          isOpen={isModalOpen}\n          onInputChange={this.handleInputChange}\n          onModalOKButtonClick={this.handleOKButtonClick}\n          onModalCloseButtonClick={this.handleCloseButtonClick}\n        />\n      </div>\n    );\n  }\n\n  handleItemControlsClick = (id, action) => {\n    switch (action) {\n      case 'add':\n        this.showModal(id, 'add');\n        break;\n      case 'delete':\n        this.deleteItem(id);\n        break;\n      case 'edit':\n        this.showModal(id, 'edit');\n        break;\n      default:\n        break;\n    }\n  }\n\n  handleInputChange = (event) => {\n    this.setState({ currentInputValue: event.target.value });\n  }\n\n  handleOKButtonClick = () => {\n    const { currentID, currentInputValue, currentAct } = this.state;\n    if (currentID !== null && currentInputValue && currentAct) {\n      if (currentAct === 'add') {\n        this.addItem(currentID, currentInputValue);\n      } else if (currentAct === 'edit') {\n        this.editItem(currentID, currentInputValue);\n      }\n      this.setState({ isModalOpen: false, currentID: null, currentInputValue: '', currentAct: '' });\n    }\n  }\n\n  handleCloseButtonClick = () => {\n    this.setState({ isModalOpen: false, currentID: null, currentInputValue: '', currentAct: '' });\n  }\n\n  showModal(id, type) {\n    this.setState({ isModalOpen: true, currentID: id, currentAct: type });\n  }\n\n  addItem(id, name) {\n    const { tree } = this.state;\n    if (id === tree.id) {\n      this.setState({ tree: { ...tree, childrens: [...tree.childrens, { id: uuid(), name, childrens: [] }] } });\n    } else {\n      const newChildrens = this.addItemByRecursion(id, name, tree.childrens);\n      this.setState({ tree: { ...tree, childrens: newChildrens } });\n    }\n  }\n\n  addItemByRecursion(id, name, childrens) {\n    return childrens.reduce((acc, value) => {\n      if (value.id === id) {\n        return [...acc, { ...value, childrens: [...value.childrens, { id: uuid(), name, childrens: [] }] }];\n      } else if (value.id !== id && !value.childrens) {\n        return [...acc, value];\n      } else if (value.id !== id && value.childrens) {\n        return [...acc, { ...value, childrens: this.addItemByRecursion(id, name, value.childrens) }];\n      }\n      return acc;\n    }, []);\n  }\n\n  deleteItem(id) {\n    const { tree } = this.state;\n    const newChildrens = this.deleteItemByRecursion(id, tree.childrens);\n    this.setState({ tree: { ...tree, childrens: newChildrens } });\n  }\n\n  deleteItemByRecursion(id, childrens) {\n    return childrens.reduce((acc, value) => {\n      if (value.id === id) {\n        return acc;\n      } else if (value.id !== id && !value.childrens) {\n        return [...acc, value];\n      } else if (value.id !== id && value.childrens) {\n        return [...acc, { ...value, childrens: this.deleteItemByRecursion(id, value.childrens) }];\n      }\n      return acc;\n    }, []);\n  }\n\n  editItem(id, name) {\n    const { tree } = this.state;\n    if (id === tree.id) {\n      this.setState({ tree: { ...tree, name } });\n    } else {\n      const newChildrens = this.editItemByRecursion(id, name, tree.childrens);\n      this.setState({ tree: { ...tree, childrens: newChildrens } });\n    }\n  }\n\n  editItemByRecursion(id, name, childrens) {\n    return childrens.reduce((acc, value) => {\n      if (value.id === id) {\n        return [...acc, { ...value, name }];\n      } else if (value.id !== id && !value.childrens) {\n        return [...acc, value];\n      } else if (value.id !== id && value.childrens) {\n        return [...acc, { ...value, childrens: this.editItemByRecursion(id, name, value.childrens) }];\n      }\n      return acc;\n    }, []);\n  }\n}\n\nexport default Application;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Application from './Application';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Application />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}